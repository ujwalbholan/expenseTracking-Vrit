{
	"info": {
		"_postman_id": "77b5b4f5-eb31-4f17-90ed-8ae701c2cfb3",
		"name": "expense-trac-Vrit",
		"description": "api documentation for expense track",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35060430",
		"_collection_link": "https://okkk66.postman.co/workspace/4ad844ba-0e38-4cb0-8cd6-499864831c49/collection/35060430-77b5b4f5-eb31-4f17-90ed-8ae701c2cfb3?action=share&source=collection_link&creator=35060430"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "register",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "username",
								"value": "test1",
								"type": "text",
								"disabled": true
							},
							{
								"key": "email",
								"value": "test1@gmaill.com",
								"type": "text",
								"disabled": true
							},
							{
								"key": "password",
								"value": "test123",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"test1\",\r\n    \"email\": \"test1@gmail.com\",\r\n    \"password\": \"test123\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{authbaseUrl}}/register/",
							"host": [
								"{{authbaseUrl}}"
							],
							"path": [
								"register",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"test1\",\r\n    \"password\": \"test123\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authbaseUrl}}/login/",
							"host": [
								"{{authbaseUrl}}"
							],
							"path": [
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"refresh\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTc1MTcxOTc0MywiaWF0IjoxNzUxNjMzMzQzLCJqdGkiOiI5ODI1Y2VhZTIxN2I0NTE1YTlmYjNjMjQ4NzFjNWQ1OSIsInVzZXJfaWQiOjJ9.kQVmDx--6JHiGTq4JpJ0whLeqF1XUVnD3RK5SBhiKHs\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authbaseUrl}}/logout/",
							"host": [
								"{{authbaseUrl}}"
							],
							"path": [
								"logout",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "refresh",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"refresh\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTc1MTcxOTk5MSwiaWF0IjoxNzUxNjMzNTkxLCJqdGkiOiJjMjM3MTgwOGQzYWU0ZWVmOGI1YmQwMzk0ODViYzBhNiIsInVzZXJfaWQiOjJ9.QVeQO3rqwhW2lwamMCuUr-q_ucaRmmHSuqLmc2qzX_c\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authbaseUrl}}/refresh/",
							"host": [
								"{{authbaseUrl}}"
							],
							"path": [
								"refresh",
								""
							]
						}
					},
					"response": []
				}
			],
			"description": "## 1\\. Register User\n\n### Description\n\nCreate a new user account with username, email, and password.\n\n### URL\n\n`POST` http://127.0.0.1:8000/user/api/auth/register/  \n\nRequest Headers\n\n- `Content-Type: application/json`\n    \n\n### Request Body (JSON)\n\n```\njsonCopyEdit{\n  \"name\": \"string\",\n  \"email\": \"string\",\n  \"password\": \"string\"\n}\n\n ```\n\n### Successful Response\n\n- **Status Code:** `201 Created`\n    \n- **Body:**\n    \n\n```\njsonCopyEdit{\n  \"message\": \"User registered successfully.\",\n  \"username\": \"string\",\n  \"email\": \"string\"\n}\n\n ```\n\n### Possible Error Responses\n\n- **Status Code:** `400 Bad Request`\n    \n- **Body:**\n    \n\n```\njsonCopyEdit{\n  \"message\": \"Username, email, and password are required.\"\n}\n\n ```\n\n- **Status Code:** `400 Bad Request` (e.g. user already exists)\n    \n- **Body:**\n    \n\n```\njsonCopyEdit{\n  \"message\": \"User with this username/email already exists.\"\n}\n\n ```\n\n## 2\\. Login User\n\n### Description\n\nAuthenticate user and provide JWT access and refresh tokens.\n\n### URL\n\n`POST` http://127.0.0.1:8000/user/api/auth/login/\n\n### Request Headers\n\n- `Content-Type: application/json`\n    \n\n### Request Body (JSON)\n\n```\njsonCopyEdit{\n  \"name\": \"string\",\n  \"password\": \"string\"\n}\n\n ```\n\n### Successful Response\n\n- **Status Code:** `200 OK`\n    \n- **Body:**\n    \n\n```\njsonCopyEdit{\n  \"message\": \"Login successful\",\n  \"access\": \"access_token_string\",\n  \"refresh\": \"refresh_token_string\",\n  \"username\": \"string\",\n  \"email\": \"string\"\n}\n\n ```\n\n### Possible Error Responses\n\n- **Status Code:** `401 Unauthorized`\n    \n- **Body:**\n    \n\n```\njsonCopyEdit{\n  \"message\": \"Invalid username or password.\"\n}\n\n ```\n\n## 3\\. Logout User\n\n### Description\n\nBlacklist the refresh token to log the user out.\n\n### URL\n\n`POST` http://127.0.0.1:8000/user/api/auth/logout/\n\n### Request Headers\n\n- `Content-Type: application/json`\n    \n\n### Request Body (JSON)\n\n```\njsonCopyEdit{\n  \"refresh\": \"refresh_token_string\"\n}\n\n ```\n\n### Successful Response\n\n- **Status Code:** `200 OK`\n    \n- **Body:**\n    \n\n```\njsonCopyEdit{\n  \"message\": \"User logged out and token blacklisted.\"\n}\n\n ```\n\n### Possible Error Responses\n\n- **Status Code:** `400 Bad Request`\n    \n- **Body:**\n    \n\n```\njsonCopyEdit{\n  \"message\": \"Refresh token is required.\"\n}\n\n ```\n\n- **Status Code:** `500 Internal Server Error`\n    \n- **Body:**\n    \n\n```\njsonCopyEdit{\n  \"message\": \"Error logging out.\",\n  \"error\": \"error details\"\n}\n\n ```\n\n---\n\n## 4\\. Refresh Token\n\n### Description\n\nGenerate a new access token using a valid refresh token.\n\n### URL\n\n`POST` http://127.0.0.1:8000/user/api/auth/register/\n\n### Request Headers\n\n- `Content-Type: application/json`\n    \n\n### Request Body (JSON)\n\n```\njsonCopyEdit{\n  \"refresh\": \"refresh_token_string\"\n}\n\n ```\n\n### Successful Response\n\n- **Status Code:** `200 OK`\n    \n- **Body:**\n    \n\n```\njsonCopyEdit{\n  \"access\": \"new_access_token_string\"\n}\n\n ```\n\n### Possible Error Responses\n\n- **Status Code:** `401 Unauthorized`\n    \n- **Body:**\n    \n\n```\njsonCopyEdit{\n  \"detail\": \"Token is invalid or expired\"\n}\n\n ```"
		},
		{
			"name": "income",
			"item": [
				{
					"name": "setIncome",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Monthly ",
									"type": "text"
								},
								{
									"key": "amount",
									"value": "200",
									"type": "text"
								},
								{
									"key": "source",
									"value": "salary",
									"type": "text"
								},
								{
									"key": "date",
									"value": "2025-06-18",
									"type": "text"
								},
								{
									"key": "noets",
									"value": "Monthly Salary",
									"type": "text"
								},
								{
									"key": "tax",
									"value": "50",
									"type": "text"
								},
								{
									"key": "tax_type",
									"value": "flat",
									"type": "text"
								},
								{
									"key": "transaction_type",
									"value": "debit",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{incomeBasrUrl}}/setIncome/",
							"host": [
								"{{incomeBasrUrl}}"
							],
							"path": [
								"setIncome",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "editIncome",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 1,\r\n  \"name\": \"Freelance\",\r\n  \"amount\": 1000,\r\n  \"source\": \"Bank\",\r\n  \"date\": \"2025-07-04\",\r\n  \"notes\": \"Updated\",\r\n  \"tax\": 10,\r\n  \"tax_type\": \"percentage\",\r\n  \"transaction_type\": \"credit\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{incomeBasrUrl}}/editIncome/",
							"host": [
								"{{incomeBasrUrl}}"
							],
							"path": [
								"editIncome",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllIncomes",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Monthly Salary",
									"type": "text"
								},
								{
									"key": "amount",
									"value": "200",
									"type": "text"
								},
								{
									"key": "source",
									"value": "salary",
									"type": "text"
								},
								{
									"key": "date",
									"value": "2025-06-18",
									"type": "text"
								},
								{
									"key": "noets",
									"value": "Monthly Salary",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{incomeBasrUrl}}/getAllIncomes/?page=2&per_page=5",
							"host": [
								"{{incomeBasrUrl}}"
							],
							"path": [
								"getAllIncomes",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								},
								{
									"key": "per_page",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteIncome",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"id\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{incomeBasrUrl}}/deleteIncome/",
							"host": [
								"{{incomeBasrUrl}}"
							],
							"path": [
								"deleteIncome",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getIncomebyId",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Monthly Salary",
									"type": "text"
								},
								{
									"key": "amount",
									"value": "200",
									"type": "text"
								},
								{
									"key": "source",
									"value": "salary",
									"type": "text"
								},
								{
									"key": "date",
									"value": "2025-06-18",
									"type": "text"
								},
								{
									"key": "noets",
									"value": "Monthly Salary",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{incomeBasrUrl}}/getIncomeById/?id=3",
							"host": [
								"{{incomeBasrUrl}}"
							],
							"path": [
								"getIncomeById",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "3"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "## 1\\. Create Income\n\n**POST** http://127.0.0.1:8000/income/api/setIncome/\n\nCreate a new income record.\n\n### Request\n\n- Content-Type: `application/x-www-form-urlencoded` or `application/json`\n    \n- Parameters (all required except notes):\n    \n    - `name` (string) — income name or title\n        \n    - `amount` (decimal) — income amount\n        \n    - `source` (string) — income source (e.g., Cash, Bank)\n        \n    - `date` (string) — date in `YYYY-MM-DD` format\n        \n    - `tax` (decimal, optional, default: 0) — tax amount\n        \n    - `tax_type` (string, optional, default: `\"flat\"`) — `\"flat\"` or `\"percentage\"`\n        \n    - `transaction_type` (string) — `\"credit\"` or `\"debit\"`\n        \n    - `notes` (string, optional) — additional notes\n        \n\n### Response\n\n- **201 Created**\n    \n\n```\njsonCopyEdit{\n  \"message\": \"Income saved successfully\",\n  \"income\": {\n    \"id\": 1,\n    \"name\": \"Salary\",\n    \"amount\": 1000.00,\n    \"tax\": 100.00,\n    \"tax_type\": \"flat\",\n    \"transaction_type\": \"credit\",\n    \"total\": 1100.00,\n    \"source\": \"Bank\",\n    \"date\": \"2025-07-04\",\n    \"notes\": \"July salary\"\n  }\n}\n\n ```\n\n- **400 Bad Request** (missing fields)\n    \n\n```\njsonCopyEdit{\"message\": \"Missing required fields\"}\n\n ```\n\n- **500 Internal Server Error** (processing error)\n    \n\n```\njsonCopyEdit{\"message\": \"Error processing request\", \"error\": \"<error details>\"}\n\n ```\n\n---\n\n## 2\\. Get All Incomes (Paginated)\n\n**GET** http://127.0.0.1:8000/income/api/getAllIncomes/?page=2&per_page=5\n\nRetrieve all income records paginated by date descending.\n\n### Query Parameters\n\n- `page` (integer, optional, default: 1) — page number\n    \n- `per_page` (integer, optional, default: 10) — items per page\n    \n\n### Response\n\n- **200 OK**\n    \n\n```\njsonCopyEdit{\n  \"count\": 50,\n  \"num_pages\": 5,\n  \"current_page\": 1,\n  \"results\": [\n    {\n      \"id\": 1,\n      \"name\": \"Salary\",\n      \"amount\": 1000.00,\n      \"tax\": 100.00,\n      \"tax_type\": \"flat\",\n      \"transaction_type\": \"credit\",\n      \"total\": 1100.00,\n      \"source\": \"Bank\",\n      \"date\": \"2025-07-04\",\n      \"notes\": \"July salary\"\n    },\n    ...\n  ]\n}\n\n ```\n\n- **405 Method Not Allowed**\n    \n\n```\njsonCopyEdit{\"message\": \"Invalid request method.\"}\n\n ```\n\n---\n\n## 3\\. Get Income by ID\n\n**GET** http://127.0.0.1:8000/income/api/getIncomeById/?id=3\n\nRetrieve a single income record by its ID.\n\n### Query Parameters\n\n- `id` (integer, required) — income record ID\n    \n\n### Response\n\n- **200 OK**\n    \n\n```\njsonCopyEdit{\n  \"id\": 1,\n  \"name\": \"Salary\",\n  \"amount\": 1000.00,\n  \"tax\": 100.00,\n  \"tax_type\": \"flat\",\n  \"transaction_type\": \"credit\",\n  \"total\": 1100.00,\n  \"source\": \"Bank\",\n  \"date\": \"2025-07-04\",\n  \"notes\": \"July salary\"\n}\n\n ```\n\n- **400 Bad Request** (missing `id`)\n    \n\n```\njsonCopyEdit{\"message\": \"Income ID is required.\"}\n\n ```\n\n- **404 Not Found** (no income with this id)\n    \n\n```\njsonCopyEdit{\"message\": \"Income not found.\"}\n\n ```\n\n- **405 Method Not Allowed**\n    \n\n```\njsonCopyEdit{\"message\": \"Invalid request method.\"}\n\n ```\n\n---\n\n## 4\\. Edit Income\n\n**PUT** http://127.0.0.1:8000/income/api/editIncome/\n\nUpdate an existing income record.\n\n### Request\n\n- Content-Type: `application/json`\n    \n- JSON body parameters (all required except `notes`):\n    \n    - `id` (integer) — ID of the income to update\n        \n    - `name` (string)\n        \n    - `amount` (decimal)\n        \n    - `source` (string)\n        \n    - `date` (string in `YYYY-MM-DD` format)\n        \n    - `tax` (decimal, optional, default: 0)\n        \n    - `tax_type` (string, optional, default: `\"flat\"`)\n        \n    - `transaction_type` (string) — `\"credit\"` or `\"debit\"`\n        \n    - `notes` (string, optional)\n        \n\n### Response\n\n- **200 OK**\n    \n\n```\njsonCopyEdit{\n  \"message\": \"Income edited successfully\",\n  \"income\": {\n    \"id\": 1,\n    \"name\": \"Updated Salary\",\n    \"amount\": 1200.00,\n    \"tax\": 120.00,\n    \"tax_type\": \"flat\",\n    \"transaction_type\": \"credit\",\n    \"total\": 1320.00,\n    \"source\": \"Bank\",\n    \"date\": \"2025-07-05\",\n    \"notes\": \"Updated note\"\n  }\n}\n\n ```\n\n- **400 Bad Request** (missing fields or invalid transaction_type)\n    \n\n```\njsonCopyEdit{\"message\": \"Missing required fields\"}\n\n ```\n\nor\n\n```\njsonCopyEdit{\"message\": \"transaction_type must be 'credit' or 'debit'\"}\n\n ```\n\n- **404 Not Found**\n    \n\n```\njsonCopyEdit{\"message\": \"Income not found\"}\n\n ```\n\n- **405 Method Not Allowed**\n    \n\n```\njsonCopyEdit{\"message\": \"Invalid request method\"}\n\n ```\n\n- **500 Internal Server Error**\n    \n\n```\njsonCopyEdit{\"message\": \"Error processing request\", \"error\": \"<error details>\"}\n\n ```\n\n---\n\n## 5\\. Delete Income\n\n**DELETE** http://127.0.0.1:8000/income/api/deleteIncome/\n\nDelete an income record by ID.\n\n### Request\n\n- Content-Type: `application/x-www-form-urlencoded` or JSON\n    \n- Parameters:\n    \n    - `id` (integer, required) — income ID to delete\n        \n\n### Response\n\n- **200 OK**\n    \n\n```\njsonCopyEdit{\"message\": \"Income deleted successfully\"}\n\n ```\n\n- **400 Bad Request** (missing id)\n    \n\n```\njsonCopyEdit{\"message\": \"Income ID is required\"}\n\n ```\n\n- **404 Not Found**\n    \n\n```\njsonCopyEdit{\"message\": \"Income not found\"}\n\n ```\n\n- **405 Method Not Allowed**\n    \n\n```\njsonCopyEdit{\"message\": \"Invalid request method\"}\n\n ```\n\n- **500 Internal Server Error**\n    \n\n```\njsonCopyEdit{\"message\": \"Error processing request\", \"error\": \"<error details>\"}\n\n ```\n\n---\n\n# Notes\n\n- For `PUT` requests, always send JSON with header `Content-Type: application/json`.\n    \n- For `POST`/`DELETE` requests with form data, use `application/x-www-form-urlencoded` or JSON accordingly.\n    \n- All date strings should be in `YYYY-MM-DD` format.\n    \n- Tax calculation logic:\n    \n    - If `tax_type` is `\"flat\"` → total = amount + tax\n        \n    - If `tax_type` is `\"percentage\"` → total = amount + (amount \\* tax / 100"
		},
		{
			"name": "expense",
			"item": [
				{
					"name": "setIncome",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Monthly ",
									"type": "text"
								},
								{
									"key": "amount",
									"value": "200",
									"type": "text"
								},
								{
									"key": "source",
									"value": "salary",
									"type": "text"
								},
								{
									"key": "date",
									"value": "2025-06-18",
									"type": "text"
								},
								{
									"key": "noets",
									"value": "Monthly Salary",
									"type": "text"
								},
								{
									"key": "tax",
									"value": "50",
									"type": "text"
								},
								{
									"key": "tax_type",
									"value": "flat",
									"type": "text"
								},
								{
									"key": "transaction_type",
									"value": "debit",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{expenseBasrUrl}}/setExpense/",
							"host": [
								"{{expenseBasrUrl}}"
							],
							"path": [
								"setExpense",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "editIncome",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 10,\r\n  \"name\": \"teacher\",\r\n  \"amount\": 1000,\r\n  \"source\": \"business\",\r\n  \"date\": \"2025-07-04\",\r\n  \"notes\": \"Updated\",\r\n  \"tax\": 10,\r\n  \"tax_type\": \"percentage\",\r\n  \"transaction_type\": \"credit\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{expenseBasrUrl}}/editExpense/",
							"host": [
								"{{expenseBasrUrl}}"
							],
							"path": [
								"editExpense",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllIncomes",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Monthly Salary",
									"type": "text"
								},
								{
									"key": "amount",
									"value": "200",
									"type": "text"
								},
								{
									"key": "source",
									"value": "salary",
									"type": "text"
								},
								{
									"key": "date",
									"value": "2025-06-18",
									"type": "text"
								},
								{
									"key": "noets",
									"value": "Monthly Salary",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{expenseBasrUrl}}/getAllExpense/?page=2&per_page=10",
							"host": [
								"{{expenseBasrUrl}}"
							],
							"path": [
								"getAllExpense",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								},
								{
									"key": "per_page",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteIncome",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"id\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{expenseBasrUrl}}/deleteExpense/",
							"host": [
								"{{expenseBasrUrl}}"
							],
							"path": [
								"deleteExpense",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getIncomebyId",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Monthly Salary",
									"type": "text"
								},
								{
									"key": "amount",
									"value": "200",
									"type": "text"
								},
								{
									"key": "source",
									"value": "salary",
									"type": "text"
								},
								{
									"key": "date",
									"value": "2025-06-18",
									"type": "text"
								},
								{
									"key": "noets",
									"value": "Monthly Salary",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{expenseBasrUrl}}/getExpenseById/?id=3",
							"host": [
								"{{expenseBasrUrl}}"
							],
							"path": [
								"getExpenseById",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "3"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "## 🧾 Expense API Documentation\n\n---\n\n### **1\\. Create Expense**\n\n**POST** `http://127.0.0.1:8000/expense/api/setExpense/`  \n  \nCreate a new expense record.\n\n#### ✅ Request\n\n**Content-Type**: `application/json` or `application/x-www-form-urlencoded`\n\n**Body Parameters**:\n\n| Field | Type | Required | Description |\n| --- | --- | --- | --- |\n| `title` | string | ✅ | Expense title |\n| `description` | string | ❌ | Optional description |\n| `amount` | decimal | ✅ | Expense amount |\n| `source` | string | ✅ | Source of expense (e.g. Cash, Card) |\n| `date` | string | ✅ | Format: `YYYY-MM-DD` |\n| `tax` | decimal | ❌ | Tax value (default: `0`) |\n| `tax_type` | string | ❌ | `\"flat\"` or `\"percentage\"` (default: flat) |\n| `transaction_type` | string | ✅ | `\"credit\"` or `\"debit\"` |\n\n---\n\n#### ✅ Successful Response – `201 Created`\n\n``` json\n{\n  \"message\": \"Expense saved successfully\",\n  \"expense\": {\n    \"id\": 1,\n    \"title\": \"Grocery Shopping\",\n    \"description\": \"Weekly groceries\",\n    \"amount\": 100.00,\n    \"tax\": 10.00,\n    \"tax_type\": \"flat\",\n    \"transaction_type\": \"debit\",\n    \"total\": 110.00,\n    \"source\": \"Cash\",\n    \"date\": \"2025-07-04\"\n  }\n}\n\n ```\n\n#### ❌ Error Responses\n\n- `400 Bad Request` – Missing required fields\n    \n\n``` json\n{\"message\": \"Missing required fields\"}\n\n ```\n\n- `500 Internal Server Error`\n    \n\n``` json\n{\"message\": \"Error processing request\", \"error\": \"<error details>\"}\n\n ```\n\n---\n\n### **2\\. Get All Expenses (Paginated)**\n\n**GET** `http://127.0.0.1:8000/expense/api/getAllExpenses/?page=1&per_page=10`\n\nRetrieve all expense records, paginated by date (most recent first).\n\n#### 🔍 Query Parameters\n\n- `page` – optional (default: 1)\n    \n- `per_page` – optional (default: 10)\n    \n\n#### ✅ Response – `200 OK`\n\n``` json\n{\n  \"count\": 35,\n  \"num_pages\": 4,\n  \"current_page\": 1,\n  \"results\": [\n    {\n      \"id\": 1,\n      \"title\": \"Grocery Shopping\",\n      \"description\": \"Weekly groceries\",\n      \"amount\": 100.00,\n      \"tax\": 10.00,\n      \"tax_type\": \"flat\",\n      \"transaction_type\": \"debit\",\n      \"total\": 110.00,\n      \"source\": \"Cash\",\n      \"date\": \"2025-07-04\"\n    },\n    ...\n  ]\n}\n\n ```\n\n#### ❌ Error Responses\n\n- `405 Method Not Allowed`\n    \n\n``` json\n{\"message\": \"Invalid request method.\"}\n\n ```\n\n---\n\n### **3\\. Get Expense by ID**\n\n**GET** `http://127.0.0.1:8000/expense/api/getExpenseById/?id=3`\n\nRetrieve a specific expense record.\n\n#### ✅ Query Parameter\n\n- `id` – required (integer)\n    \n\n#### ✅ Response – `200 OK`\n\n``` json\n{\n  \"id\": 1,\n  \"title\": \"Grocery Shopping\",\n  \"description\": \"Weekly groceries\",\n  \"amount\": 100.00,\n  \"tax\": 10.00,\n  \"tax_type\": \"flat\",\n  \"transaction_type\": \"debit\",\n  \"total\": 110.00,\n  \"source\": \"Cash\",\n  \"date\": \"2025-07-04\"\n}\n\n ```\n\n#### ❌ Error Responses\n\n- `400 Bad Request` – Missing ID\n    \n\n``` json\n{\"message\": \"Expense ID is required.\"}\n\n ```\n\n- `404 Not Found` – Expense not found\n    \n\n``` json\n{\"message\": \"Expense not found.\"}\n\n ```\n\n---\n\n### **4\\. Edit Expense**\n\n**PUT** `http://127.0.0.1:8000/expense/api/editExpense/`\n\nUpdate an existing expense record.\n\n#### ✅ Request\n\n**Content-Type**: `application/json`\n\n**JSON Body Parameters**:\n\n| Field | Type | Required | Description |\n| --- | --- | --- | --- |\n| `id` | integer | ✅ | Expense ID to update |\n| `title` | string | ✅ | Title of the expense |\n| `description` | string | ❌ | Optional description |\n| `amount` | decimal | ✅ | Expense amount |\n| `source` | string | ✅ | Source of expense |\n| `date` | string | ✅ | Format: `YYYY-MM-DD` |\n| `tax` | decimal | ❌ | Optional tax (default: 0) |\n| `tax_type` | string | ❌ | \"flat\" or \"percentage\" |\n| `transaction_type` | string | ✅ | \"credit\" or \"debit\" |\n\n#### ✅ Response – `200 OK`\n\n``` json\n{\n  \"message\": \"Expense edited successfully\",\n  \"expense\": {\n    \"id\": 1,\n    \"title\": \"Grocery Shopping\",\n    \"description\": \"Updated description\",\n    \"amount\": 120.00,\n    \"tax\": 12.00,\n    \"tax_type\": \"flat\",\n    \"transaction_type\": \"debit\",\n    \"total\": 132.00,\n    \"source\": \"Cash\",\n    \"date\": \"2025-07-06\"\n  }\n}\n\n ```\n\n#### ❌ Error Responses\n\n- `400 Bad Request`\n    \n\n``` json\n{\"message\": \"Missing required fields\"}\n\n ```\n\nor\n\n``` json\n{\"message\": \"transaction_type must be 'credit' or 'debit'\"}\n\n ```\n\n- `404 Not Found`\n    \n\n``` json\n{\"message\": \"Expense not found\"}\n\n ```\n\n---\n\n### **5\\. Delete Expense**\n\n**DELETE** `http://127.0.0.1:8000/expense/api/deleteExpense/`\n\nDelete an expense record.\n\n#### ✅ Request\n\n**Content-Type**: `application/x-www-form-urlencoded` or `application/json`\n\n**Body Parameter**:\n\n- `id` – required (integer)\n    \n\n#### ✅ Response – `200 OK`\n\n``` json\n{\"message\": \"Expense deleted successfully\"}\n\n ```\n\n#### ❌ Error Responses\n\n- `400 Bad Request`\n    \n\n``` json\n{\"message\": \"Expense ID is required\"}\n\n ```\n\n- `404 Not Found`\n    \n\n``` json\n{\"message\": \"Expense not found\"}\n\n ```\n\n- `500 Internal Server Error`\n    \n\n``` json\n{\"message\": \"Error processing request\", \"error\": \"<error details>\"}\n\n ```\n\n---\n\n### 💡 Notes:\n\n- For `PUT`, always use `application/json` in headers.\n    \n- For `POST`/`DELETE`, use either form data or JSON.\n    \n- All dates must be in `YYYY-MM-DD` format.\n    \n- **Tax Calculation Logic**:\n    \n    - If `tax_type` is `\"flat\"` → `total = amount + tax`\n        \n    - If `tax_type` is `\"percentage\"` → `total = amount + (amount \\* tax / 100)`"
		},
		{
			"name": "helthCheckRout",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						""
					]
				}
			},
			"response": []
		}
	]
}